@page "/clientes/novo"
@page "/clientes/editar/{Id:int}"
@using SistemaPDV.Core.DTOs
@using SistemaPDV.Web.Services
@inject ClienteApiService ClienteService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="text-primary">
                    <i class="fas fa-user me-2"></i>
                    @(IsEdit ? "Editar Cliente" : "Novo Cliente")
                </h2>
                <button class="btn btn-outline-secondary" @onclick="Voltar">
                    <i class="fas fa-arrow-left me-2"></i>Voltar
                </button>
            </div>

            @if (!string.IsNullOrEmpty(mensagemErro))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="fas fa-exclamation-circle me-2"></i>@mensagemErro
                    <button type="button" class="btn-close" @onclick="() => mensagemErro = string.Empty"></button>
                </div>
            }

            @if (carregando)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Carregando...</span>
                    </div>
                    <p class="mt-2 text-muted">Carregando dados do cliente...</p>
                </div>
            }
            else
            {
                <div class="card shadow">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">
                            <i class="fas fa-user-edit me-2"></i>
                            Dados do Cliente
                        </h5>
                    </div>
                    <div class="card-body">
                        <form @formname="cliente-form">
                            <div class="row">
                                <!-- Nome -->
                                <div class="col-md-6 mb-3">
                                    <label for="nome" class="form-label">Nome *</label>
                                    <input type="text" id="nome" name="nome" class="form-control" placeholder="Nome completo"
                                           autocomplete="name"
                                           @bind="nome" required />
                                </div>

                                <!-- Email -->
                                <div class="col-md-6 mb-3">
                                    <label for="email" class="form-label">Email</label>
                                    <input type="email" id="email" name="email" class="form-control" placeholder="email@exemplo.com"
                                           autocomplete="email"
                                           @bind="email" />
                                </div>

                                <!-- Telefone -->
                                <div class="col-md-6 mb-3">
                                    <label for="telefone" class="form-label">Telefone</label>
                                    <input type="tel" id="telefone" name="telefone" class="form-control" placeholder="(11) 99999-9999"
                                           autocomplete="tel"
                                           @bind="telefone" />
                                </div>

                                <!-- CPF -->
                                <div class="col-md-6 mb-3">
                                    <label for="cpf" class="form-label">CPF</label>
                                    <input type="text" id="cpf" name="cpf" class="form-control" placeholder="000.000.000-00"
                                           autocomplete="off"
                                           @bind="cpf" />
                                </div>

                                <!-- CNPJ -->
                                <div class="col-md-6 mb-3">
                                    <label for="cnpj" class="form-label">CNPJ</label>
                                    <input type="text" id="cnpj" name="cnpj" class="form-control" placeholder="00.000.000/0000-00"
                                           autocomplete="off"
                                           @bind="cnpj" />
                                </div>

                                <!-- Endereço -->
                                <div class="col-md-8 mb-3">
                                    <label for="endereco" class="form-label">Endereço</label>
                                    <input type="text" id="endereco" name="endereco" class="form-control" placeholder="Rua, Avenida, etc."
                                           autocomplete="street-address"
                                           @bind="endereco" />
                                </div>

                                <!-- Número -->
                                <div class="col-md-4 mb-3">
                                    <label for="numero" class="form-label">Número</label>
                                    <input type="text" id="numero" name="numero" class="form-control" placeholder="123"
                                           autocomplete="off"
                                           @bind="numero" />
                                </div>

                                <!-- Complemento -->
                                <div class="col-md-6 mb-3">
                                    <label for="complemento" class="form-label">Complemento</label>
                                    <input type="text" id="complemento" name="complemento" class="form-control" placeholder="Apto, Sala, etc."
                                           autocomplete="off"
                                           @bind="complemento" />
                                </div>

                                <!-- Bairro -->
                                <div class="col-md-6 mb-3">
                                    <label for="bairro" class="form-label">Bairro</label>
                                    <input type="text" id="bairro" name="bairro" class="form-control" placeholder="Bairro"
                                           autocomplete="address-level2"
                                           @bind="bairro" />
                                </div>

                                <!-- Cidade -->
                                <div class="col-md-6 mb-3">
                                    <label for="cidade" class="form-label">Cidade</label>
                                    <input type="text" id="cidade" name="cidade" class="form-control" placeholder="Cidade"
                                           autocomplete="address-level2"
                                           @bind="cidade" />
                                </div>

                                <!-- UF -->
                                <div class="col-md-3 mb-3">
                                    <label for="uf" class="form-label">UF</label>
                                    <select id="uf" name="uf" class="form-select" @bind="uf">
                                        <option value="">Selecione...</option>
                                        <option value="AC">AC</option>
                                        <option value="AL">AL</option>
                                        <option value="AP">AP</option>
                                        <option value="AM">AM</option>
                                        <option value="BA">BA</option>
                                        <option value="CE">CE</option>
                                        <option value="DF">DF</option>
                                        <option value="ES">ES</option>
                                        <option value="GO">GO</option>
                                        <option value="MA">MA</option>
                                        <option value="MT">MT</option>
                                        <option value="MS">MS</option>
                                        <option value="MG">MG</option>
                                        <option value="PA">PA</option>
                                        <option value="PB">PB</option>
                                        <option value="PR">PR</option>
                                        <option value="PE">PE</option>
                                        <option value="PI">PI</option>
                                        <option value="RJ">RJ</option>
                                        <option value="RN">RN</option>
                                        <option value="RS">RS</option>
                                        <option value="RO">RO</option>
                                        <option value="RR">RR</option>
                                        <option value="SC">SC</option>
                                        <option value="SP">SP</option>
                                        <option value="SE">SE</option>
                                        <option value="TO">TO</option>
                                    </select>
                                </div>

                                <!-- CEP -->
                                <div class="col-md-3 mb-3">
                                    <label for="cep" class="form-label">CEP</label>
                                    <input type="text" id="cep" name="cep" class="form-control" placeholder="00000-000"
                                           autocomplete="postal-code"
                                           @bind="cep" />
                                </div>

                                <!-- Observações -->
                                <div class="col-12 mb-3">
                                    <label for="observacoes" class="form-label">Observações</label>
                                    <textarea id="observacoes" name="observacoes" class="form-control" rows="3" placeholder="Observações adicionais"
                                              @bind="observacoes"></textarea>
                                </div>

                                @if (IsEdit)
                                {
                                    <!-- Ativo -->
                                    <div class="col-12 mb-3">
                                        <div class="form-check">
                                            <input type="checkbox" class="form-check-input" id="ativo" @bind="ativo" />
                                            <label class="form-check-label" for="ativo">Cliente Ativo</label>
                                        </div>
                                    </div>
                                }

                                <!-- Botões -->
                                <div class="col-12 d-flex justify-content-end gap-2">
                                    <button type="button" class="btn btn-outline-secondary" @onclick="Voltar">
                                        <i class="fas fa-times me-2"></i>Cancelar
                                    </button>
                                    <button type="button" class="btn btn-primary" disabled="@salvando" @onclick="SalvarCliente">
                                        @if (salvando)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        }
                                        <i class="fas fa-save me-2"></i>
                                        @(IsEdit ? "Atualizar" : "Cadastrar")
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public int? Id { get; set; }

    private bool IsEdit => Id.HasValue;
    private bool carregando = false;
    private bool salvando = false;
    private string mensagemErro = string.Empty;

    // Campos do formulário
    private string nome = string.Empty;
    private string? email;
    private string? telefone;
    private string? cpf;
    private string? cnpj;
    private string? endereco;
    private string? numero;
    private string? complemento;
    private string? bairro;
    private string? cidade;
    private string? uf;
    private string? cep;
    private string? observacoes;
    private bool ativo = true;

    protected override async Task OnInitializedAsync()
    {
        if (IsEdit)
        {
            await CarregarCliente();
        }
    }

    private async Task CarregarCliente()
    {
        carregando = true;
        try
        {
            var clienteExistente = await ClienteService.ObterPorIdAsync(Id!.Value);
            if (clienteExistente == null)
            {
                mensagemErro = "Cliente não encontrado";
                return;
            }

            // Preencher campos
            nome = clienteExistente.Nome;
            email = clienteExistente.Email;
            telefone = clienteExistente.Telefone;
            cpf = clienteExistente.CPF;
            cnpj = clienteExistente.CNPJ;
            endereco = clienteExistente.Endereco;
            numero = clienteExistente.Numero;
            complemento = clienteExistente.Complemento;
            bairro = clienteExistente.Bairro;
            cidade = clienteExistente.Cidade;
            uf = clienteExistente.UF;
            cep = clienteExistente.CEP;
            observacoes = clienteExistente.Observacoes;
            ativo = clienteExistente.Ativo;
        }
        catch (Exception ex)
        {
            mensagemErro = "Erro ao carregar cliente: " + ex.Message;
        }
        finally
        {
            carregando = false;
        }
    }

    private async Task SalvarCliente()
    {
        Console.WriteLine("🚀 INÍCIO - SalvarCliente chamado");
        
        if (string.IsNullOrWhiteSpace(nome))
        {
            Console.WriteLine("❌ ERRO - Nome está vazio");
            mensagemErro = "Nome é obrigatório";
            return;
        }

        Console.WriteLine($"✅ VALIDAÇÃO - Nome válido: {nome}");
        salvando = true;
        mensagemErro = string.Empty;

        try
        {
            if (IsEdit)
            {
                Console.WriteLine("📝 MODO - Editando cliente existente");
                var clienteAtualizacao = new ClienteAtualizacaoDto
                {
                    Nome = nome,
                    Email = email,
                    Telefone = telefone,
                    CPF = cpf,
                    CNPJ = cnpj,
                    Endereco = endereco,
                    Numero = numero,
                    Complemento = complemento,
                    Bairro = bairro,
                    Cidade = cidade,
                    UF = uf,
                    CEP = cep,
                    Observacoes = observacoes,
                    Ativo = ativo
                };

                var (sucesso, _, erro) = await ClienteService.AtualizarAsync(Id!.Value, clienteAtualizacao);
                if (sucesso)
                {
                    Navigation.NavigateTo("/clientes");
                }
                else
                {
                    mensagemErro = erro ?? "Erro ao atualizar cliente";
                }
            }
            else
            {
                Console.WriteLine("➕ MODO - Criando novo cliente");
                Console.WriteLine($"📊 DADOS - Nome={nome}, Email={email}, Telefone={telefone}");
                
                var clienteCriacao = new ClienteCriacaoDto
                {
                    Nome = nome,
                    Email = email,
                    Telefone = telefone,
                    CPF = cpf,
                    CNPJ = cnpj,
                    Endereco = endereco,
                    Numero = numero,
                    Complemento = complemento,
                    Bairro = bairro,
                    Cidade = cidade,
                    UF = uf,
                    CEP = cep,
                    Observacoes = observacoes
                };

                Console.WriteLine($"DTO criado: {System.Text.Json.JsonSerializer.Serialize(clienteCriacao)}");

                var (sucesso, clienteRetornado, erro) = await ClienteService.CriarAsync(clienteCriacao);
                
                Console.WriteLine($"Resultado: Sucesso={sucesso}, Erro={erro}");
                
                if (sucesso)
                {
                    Navigation.NavigateTo("/clientes");
                }
                else
                {
                    mensagemErro = erro ?? "Erro ao criar cliente";
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exceção: {ex.Message}");
            mensagemErro = "Erro ao salvar cliente: " + ex.Message;
        }
        finally
        {
            salvando = false;
        }
    }

    private void Voltar()
    {
        Navigation.NavigateTo("/clientes");
    }
}
